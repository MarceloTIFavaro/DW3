{% extends "templates/base.html" %}

{% block content %}

  <div x-data="cursoForm()">
    <ol class="breadcrumb mb-2">
      <li class="breadcrumb-item active">{{ title }}</li>
    </ol>

    <div class="row">
      <div class="col-md-6">

        <div class="card">
          <div class="card-header">
            Cadastro de curso
          </div>
          <div class="card-body">

            <form @submit.prevent="submitForm">
              <div class="form-group mb-3">
                <label for="codigo">Código</label>
                <input type="text" class="form-control" id="codigo" x-model="form.codigo" required>
              </div>

              <div class="form-group mb-3">
                <label for="descricao">Descrição</label>
                <input type="text" class="form-control" id="descricao" x-model="form.descricao" required>
              </div>

              <div class="form-group mb-3">
                <label for="ativo">Ativo</label>
                <select class="form-select" id="ativo" x-model="form.ativo" required>
                   <option value="true">Sim</option>
                   <option value="false">Não</option>
                 </select>
               </div>

              <button type="submit" class="btn btn-primary mt-2">Salvar</button>
              <a href="/cursos/ManutCursos" class="btn btn-secondary mt-2">Voltar</a>
            </form>

            <div class="mt-3">
              <template x-if="message">
                <div :class="messageClass" x-text="message"></div>
              </template>
            </div>

          </div>
        </div>

      </div>
    </div>
  </div>

  <script>
    function cursoForm() {
      return {
        form: {
          codigo: '',
          descricao: '',
          ativo: true, // Define 'Sim' como padrão
          deleted: false // Inclui o campo deleted com valor padrão
        },
        message: '',
        messageClass: '',

        async submitForm() {
          // Garante que 'ativo' seja booleano antes de enviar
          this.form.ativo = this.form.ativo === 'true' || this.form.ativo === true;

          try {
            console.log("Enviando dados:", JSON.stringify(this.form)); // Log para depuração
            const response = await fetch('/cursos/InsertCursos', {
              method: 'POST',
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(this.form)
            });
            const result = await response.json();
            console.log("Resultado do backend:", result); // Log para depuração

            if (result.status === "ok") {
              alert("Curso cadastrado com sucesso!");
              this.resetForm();
            } else {
              // Agora 'result.msg' SEMPRE terá a mensagem de erro vinda do backend ou do axios
              this.message = `Erro! Não foi possível cadastrar o curso: ${result.msg}`;
              this.messageClass = 'alert alert-danger';
            }

          } catch (error) {
            console.error("Erro na requisição:", error); // Log detalhado do erro
            this.message = `Erro de conexão: ${error.message}`;
            this.messageClass = 'alert alert-danger';
          }
        },

        resetForm() {
          this.form = { codigo: '', descricao: '', ativo: true, deleted: false };
          this.message = '';
        }
      }
    }

    window.onload = function() {
      windowOnLoad();
    };
  </script>

{% endblock %}